generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedIndexes", "fullTextSearch", "filterJson"]
}

datasource db {
  provider = "postgresql"
  url      = "postgres://tmpthyfotxgtzy:e20bc7ebe79bc8ac299006817d04c5b46e8384d755e8e89e40911235e6bfc81a@ec2-44-196-223-128.compute-1.amazonaws.com:5432/d7m3hmq0dchi7c"
}

model Property {
  id          Int     @id @default(autoincrement())
  uuid        String  @unique @default(cuid())
  object_id   Int
  object_type String
  prop_group  String
  prop_key    String
  prop_value  String?
  prop_status Int?

  @@unique([object_id, object_type, prop_group, prop_key], name: "object_property")
}

model Content {
  id              Int      @id @default(autoincrement())
  uuid            String   @unique @default(cuid())
  language_id     Int      @default(1)
  object_id       Int
  object_type     String
  title           String?
  description     String?
  seo_title       String?
  seo_description String?
  createdAt       DateTime @default(now())

  @@unique([language_id, object_id, object_type], name: "object_content")
}

model Post {
  id          Int      @id @default(autoincrement())
  uuid        String   @unique @default(cuid())
  post_type   String
  title       String?
  description String?
  image       String?
  slug        String   @unique @default(cuid())
  createdAt   DateTime @default(now())
}

model Product {
  id             Int      @id @default(autoincrement())
  uuid           String   @unique @default(cuid())
  title          String?
  description    String?
  slug           String   @unique
  rate           Float?
  createdAt      DateTime @default(now())
  currencyRate   Float?
  currencySymbol String?
  price          Float?
}

model Account {
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  createdAt          DateTime @default(now())
  uuid               String   @unique @default(cuid())
  id                 Int      @id @default(autoincrement())
  userId             Int
  status             Int      @default(1)
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  sessionToken String    @unique
  expires      DateTime?
  createdAt    DateTime  @default(now())
  uuid         String    @unique @default(cuid())
  id           Int       @id @default(autoincrement())
  userId       Int
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Profile {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(cuid())
  type      String?
  name      String?
  userId    Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String
  createdAt     DateTime  @default(now())
  uuid          String    @unique @default(cuid())
  id            Int       @id @default(autoincrement())
  userGroupId   Int
  status        Int       @default(1)
  firstname     String?
  lastname      String?
  user_group    UserGroup @relation(fields: [userGroupId], references: [id], onDelete: Cascade)
  accounts      Account[]
  profiles      Profile[]
  sessions      Session[]
}

model UserGroup {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(cuid())
  name      String?
  grant     String?
  createdAt DateTime @default(now())
  users     User[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model CustomerGroup {
  id        Int        @id @default(autoincrement())
  uuid      String     @unique @default(cuid())
  name      String
  settings  String?
  createdAt DateTime   @default(now())
  customers Customer[]
  
  @@index([name],type:Gist)
}

model Customer {
  id              Int           @id @default(autoincrement())
  uuid            String        @unique @default(cuid())
  firstname       String?
  lastname        String?
  company         String?
  email           String        @unique
  phone           String?
  risky           Int?
  status          Int           @default(1)
  createdAt       DateTime      @default(now())
  commission      Int?
  customerGroupId Int
  customer_group  CustomerGroup @relation(fields: [customerGroupId], references: [id], onDelete: Cascade)
  mtaccounts      MTAccount[]
  
  @@index([firstname, lastname],type:Gist)
  @@index([company],type:Gist)
  @@index([email],type:Gist)
  @@index([phone],type:Gist)
}

model MTAccount {
  id                 Int       @id @default(autoincrement())
  uuid               String    @unique @default(cuid())
  name               String?
  username           String?   @unique
  password           String?
  server             String?
  createdAt          DateTime  @default(now())
  status             Int       @default(1)
  account            Int       @unique
  balance            Decimal?  @db.Decimal(10, 2)
  commission_blocked Decimal?  @db.Decimal(10, 2)
  company            String?
  credit             Decimal?  @db.Decimal(10, 2)
  currency           String?
  customerId         Int
  equity             Decimal?  @db.Decimal(10, 2)
  leverage           Int?
  liabilities        Decimal?  @db.Decimal(10, 2)
  limit_orders       Int?
  login              String?
  margin             Decimal?  @db.Decimal(10, 2)
  margin_assets      Decimal?  @db.Decimal(10, 2)
  margin_free        Decimal?  @db.Decimal(10, 2)
  margin_initial     Decimal?  @db.Decimal(10, 2)
  margin_level       Decimal?  @db.Decimal(10, 2)
  margin_maintenance Decimal?  @db.Decimal(10, 2)
  margin_so_call     Decimal?  @db.Decimal(10, 2)
  margin_so_mode     Int?
  margin_so_so       Decimal?  @db.Decimal(10, 2)
  profit             Decimal?  @db.Decimal(10, 2)
  trade_allowed      Int?
  trade_expert       Int?
  trade_mode         Int?
  risky              Int?
  setup              Int?
  workstation        String?
  platform           String?
  comments           String?
  commission         Int?
  mtCreateAt         DateTime?
  customer           Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  orders             MTOrder[]

  @@index([name],type:Gist)
  @@index([server],type:Gist)
  @@index([company],type:Gist)
  @@index([workstation],type:Gist)
  @@index([platform],type:Gist)
  @@index([comments],type:Gist)
}

model MTOrder {
  id          Int       @id @default(autoincrement())
  uuid        String    @unique @default(cuid())
  ticket      Int       @unique
  magicNumber Int
  type        String?
  size        Decimal?  @db.Decimal(10, 2)
  item        String?
  openPrice   Decimal?  @db.Decimal(10, 5)
  stopLoss    Decimal?  @db.Decimal(10, 5)
  takeProfit  Decimal?  @db.Decimal(10, 5)
  commission  Decimal?  @db.Decimal(10, 2)
  swap        Decimal?  @db.Decimal(10, 2)
  profit      Decimal?  @db.Decimal(10, 2)
  comment     String?
  account     Int
  status      Int       @default(1)
  createdAt   DateTime  @default(now())
  openTime    DateTime?
  closeTime   DateTime?
  order       MTAccount @relation(fields: [account], references: [account], onDelete: Cascade)

  @@index([item],type:Gist)
}
